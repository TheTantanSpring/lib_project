name: Advanced Deploy to EC2 (DISABLED)

# 비활성화 - 타임아웃 문제로 인해 임시 중단
# on:
#   push:
#     branches: [ master ]

# 수동 실행만 가능하도록 변경
on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm install
    
    - name: Run tests
      run: |
        cd frontend
        npm run build
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      working-directory: ./backend

    - name: Test backend
      run: |
        cd backend
        ./gradlew test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        debug: true
        script: |
          echo "✅ SSH 연결 성공!"
          whoami
          pwd
          ls -la
    
    - name: Deploy to Production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        debug: true
        timeout: 60s
        script: |
          cd /home/ubuntu/lib_project
          
          # 배포 전 백업 (현재 안정적인 상태를 백업)
          DATE=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups
          if docker ps -q -f name=library_postgres; then
            echo "📦 현재 PostgreSQL 데이터베이스 백업 중..."
            docker exec library_postgres pg_dump -U library_user library_db > backups/backup_$DATE.sql || echo "⚠️ 백업 실패 (계속 진행)"
            echo "✅ 백업 완료: backups/backup_$DATE.sql"
          else
            echo "ℹ️ PostgreSQL 컨테이너가 실행되지 않음 - 백업 건너뜀 (첫 배포이거나 컨테이너가 중지됨)"
          fi
          
          # 코드 강제 업데이트 (force push 대응)
          echo "📥 최신 코드 가져오기..."
          git fetch origin
          git reset --hard origin/master
          
          # 무중단 배포 (블루-그린 방식)
          echo "🚀 무중단 배포 시작..."
          
          # 새 컨테이너 빌드 (캐시 사용으로 속도 향상)
          echo "🔨 Docker 이미지 빌드 중..."
          timeout 1800 docker-compose build || {
            echo "❌ 빌드 타임아웃 또는 실패"
            exit 1
          }
          
          # 기존 컨테이너 중지 및 새 컨테이너 시작
          echo "🔄 컨테이너 재시작 중..."
          docker-compose down || true
          docker-compose up -d
          
          # 컨테이너 상태 확인
          echo "📊 컨테이너 상태 확인:"
          docker-compose ps
          
          # 헬스체크 (60초 대기)
          echo "🔍 헬스체크 중..."
          sleep 60
          
          # 백엔드 헬스체크
          echo "🔍 백엔드 헬스체크..."
          if curl -f -m 10 http://localhost:8080/api/libraries; then
            echo "✅ 백엔드 정상"
          else
            echo "❌ 백엔드 헬스체크 실패"
            docker-compose logs backend
            exit 1
          fi
          
          # 프론트엔드 헬스체크
          echo "🔍 프론트엔드 헬스체크..."
          if curl -f -m 10 http://localhost:3000; then
            echo "✅ 프론트엔드 정상"
          else
            echo "❌ 프론트엔드 헬스체크 실패"
            docker-compose logs frontend
            exit 1
          fi
          
          echo "🎉 배포 성공!"
          # 불필요한 이미지 정리
          docker system prune -f
          
          # 슬랙 알림 (선택사항)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚀 배포 완료: lib_book"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # deploy-staging job 제거 - 현재 사용하지 않음 